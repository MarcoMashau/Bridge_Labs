@*@page "/Checkout"
@inherits CheckoutBase

<h3 class="mb-5">Checkout</h3>
<div class="row">
    <div class="col-md-6" style="display:@DisplayButtons">
        <h4 class="mb-2">Payment Method</h4>
        <div id="smart-button-container">
            <input type="hidden" name="descriptionInput" id="description" @bind="PaymentDescription" />
            <input name="amountInput" type="hidden" id="amount" @bind="PaymentAmount">
            <div style="text-align: center; margin-top: 0.625rem;" id="paypal-button-container"></div>
        </div>
    </div>
    @if (ShoppingCartItems == null)
    {
        <h3>Loading...</h3>
    }
    else
    {
        <div class="col-md-6">
            <h4 class="mb-2">Payment Summary</h4>
            @if (ShoppingCartItems.Count() > 0)
            {
                <table class="table">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ShoppingCartItems)
                        {
                            <tr>
                                <td>@item.Qty x @item.ProductName</td>
                                <td>@($"R{item.TotalPrice.ToString("0.00", new CultureInfo("en-ZA"))}")</td>
                            </tr>
                        }
                        <tr>
                            <td><b>Total</b></td>
                            <td>@($"R{PaymentAmount.ToString("0.00", new CultureInfo("en-ZA"))}")</td>
                        </tr>
                    </tbody>
                </table>
            }
            else
            {
                <p>You currently have no items in your shopping cart</p>
            }
        </div>
    }
</div>
*@


@page "/Checkout"
@inherits CheckoutBase

<h3 class="mb-5">Checkout</h3>

@code {
    protected override void OnInitialized()
    {
        Console.WriteLine("Component initialized");
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine("Parameters set");
        base.OnParametersSet();


        StateHasChanged();

        base.OnParametersSet();
        Console.WriteLine("this is a rerun");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine($"After render (synchronous), firstRender: {firstRender}");
        base.OnAfterRender(firstRender);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Console.WriteLine($"After render (asynchronous), firstRender: {firstRender}");
        await base.OnAfterRenderAsync(firstRender);
    }
}

<div class="row">
    <!-- Your existing markup -->
</div>
